{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DEll\\\\Pictures\\\\gunna\\\\frontend\\\\src\\\\App.js\";\nimport axios from 'axios';\nimport React from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport Dashboard from './components/Dashboard';\nimport ConnectionTest from './components/ConnectionTest';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/register\",\n        element: /*#__PURE__*/_jsxDEV(Register, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 42\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/dashboard\",\n        element: /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/connection-test\",\n        element: /*#__PURE__*/_jsxDEV(ConnectionTest, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\n\n// Get the current port from the window location\n_c = App;\nconst getCurrentPort = () => {\n  return window.location.port || '3000';\n};\nconst getBackendUrl = () => {\n  const currentPort = getCurrentPort();\n  console.log('Frontend running on port:', currentPort);\n\n  // If React is on 3002, backend should still be on 5000\n  return 'http://localhost:5000';\n};\nconst API = axios.create({\n  baseURL: getBackendUrl(),\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Enhanced request interceptor\nAPI.interceptors.request.use(config => {\n  console.log(`üîÑ Making API request to: ${config.baseURL}${config.url}`);\n  console.log(`üìç Frontend: ${window.location.origin}`);\n  return config;\n}, error => {\n  console.error('‚ùå Request setup error:', error);\n  return Promise.reject(error);\n});\n\n// Enhanced response interceptor\nAPI.interceptors.response.use(response => {\n  console.log('‚úÖ Request successful');\n  return response;\n}, error => {\n  console.error('‚ùå API Error Details:', {\n    message: error.message,\n    code: error.code,\n    response: error.response,\n    request: error.request\n  });\n  if (error.code === 'ECONNREFUSED') {\n    error.message = `Cannot connect to backend server at ${getBackendUrl()}. Please ensure:\\n\\n1. Backend is running on port 5000\\n2. Run: node server.js in backend folder\\n3. No firewall is blocking the connection`;\n  } else if (error.message === 'Network Error') {\n    error.message = `Network error - cannot reach backend server at ${getBackendUrl()}`;\n  } else if (!error.response) {\n    error.message = 'No response from server. The backend might not be running.';\n  }\n  return Promise.reject(error);\n});\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["axios","React","BrowserRouter","Routes","Route","Login","Register","Dashboard","ConnectionTest","jsxDEV","_jsxDEV","App","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","getCurrentPort","window","location","port","getBackendUrl","currentPort","console","log","API","create","baseURL","timeout","headers","interceptors","request","use","config","url","origin","error","Promise","reject","response","message","code","$RefreshReg$"],"sources":["C:/Users/DEll/Pictures/gunna/frontend/src/App.js"],"sourcesContent":["import axios from 'axios';\n\n\nimport React from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport Dashboard from './components/Dashboard';\nimport ConnectionTest from './components/ConnectionTest';\n\nexport default function App(){\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path='/' element={<Login/>} />\n        <Route path='/register' element={<Register/>} />\n        <Route path='/dashboard' element={<Dashboard/>} />\n        <Route path='/connection-test' element={<ConnectionTest/>} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\n\n\n\n\n\n// Get the current port from the window location\nconst getCurrentPort = () => {\n  return window.location.port || '3000';\n};\n\nconst getBackendUrl = () => {\n  const currentPort = getCurrentPort();\n  console.log('Frontend running on port:', currentPort);\n  \n  // If React is on 3002, backend should still be on 5000\n  return 'http://localhost:5000';\n};\n\nconst API = axios.create({\n  baseURL: getBackendUrl(),\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Enhanced request interceptor\nAPI.interceptors.request.use(\n  (config) => {\n    console.log(`üîÑ Making API request to: ${config.baseURL}${config.url}`);\n    console.log(`üìç Frontend: ${window.location.origin}`);\n    return config;\n  },\n  (error) => {\n    console.error('‚ùå Request setup error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Enhanced response interceptor\nAPI.interceptors.response.use(\n  (response) => {\n    console.log('‚úÖ Request successful');\n    return response;\n  },\n  (error) => {\n    console.error('‚ùå API Error Details:', {\n      message: error.message,\n      code: error.code,\n      response: error.response,\n      request: error.request\n    });\n    \n    if (error.code === 'ECONNREFUSED') {\n      error.message = `Cannot connect to backend server at ${getBackendUrl()}. Please ensure:\\n\\n1. Backend is running on port 5000\\n2. Run: node server.js in backend folder\\n3. No firewall is blocking the connection`;\n    } else if (error.message === 'Network Error') {\n      error.message = `Network error - cannot reach backend server at ${getBackendUrl()}`;\n    } else if (!error.response) {\n      error.message = 'No response from server. The backend might not be running.';\n    }\n    \n    return Promise.reject(error);\n  }\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}