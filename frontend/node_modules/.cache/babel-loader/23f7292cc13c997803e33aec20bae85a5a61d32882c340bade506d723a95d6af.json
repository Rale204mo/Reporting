{"ast":null,"code":"import axios from'axios';import React from'react';import{BrowserRouter,Routes,Route}from'react-router-dom';import Login from'./components/Login';import Register from'./components/Register';import Dashboard from'./components/Dashboard';import ConnectionTest from'./components/ConnectionTest';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function App(){return/*#__PURE__*/_jsx(BrowserRouter,{children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(Login,{})}),/*#__PURE__*/_jsx(Route,{path:\"/register\",element:/*#__PURE__*/_jsx(Register,{})}),/*#__PURE__*/_jsx(Route,{path:\"/dashboard\",element:/*#__PURE__*/_jsx(Dashboard,{})}),/*#__PURE__*/_jsx(Route,{path:\"/connection-test\",element:/*#__PURE__*/_jsx(ConnectionTest,{})})]})});}// Get the current port from the window location\nconst getCurrentPort=()=>{return window.location.port||'3000';};const getBackendUrl=()=>{const currentPort=getCurrentPort();console.log('Frontend running on port:',currentPort);// If React is on 3002, backend should still be on 5000\nreturn'http://localhost:5000';};const API=axios.create({baseURL:getBackendUrl(),timeout:10000,headers:{'Content-Type':'application/json'}});// Enhanced request interceptor\nAPI.interceptors.request.use(config=>{console.log(\"\\uD83D\\uDD04 Making API request to: \".concat(config.baseURL).concat(config.url));console.log(\"\\uD83D\\uDCCD Frontend: \".concat(window.location.origin));return config;},error=>{console.error('‚ùå Request setup error:',error);return Promise.reject(error);});// Enhanced response interceptor\nAPI.interceptors.response.use(response=>{console.log('‚úÖ Request successful');return response;},error=>{console.error('‚ùå API Error Details:',{message:error.message,code:error.code,response:error.response,request:error.request});if(error.code==='ECONNREFUSED'){error.message=\"Cannot connect to backend server at \".concat(getBackendUrl(),\". Please ensure:\\n\\n1. Backend is running on port 5000\\n2. Run: node server.js in backend folder\\n3. No firewall is blocking the connection\");}else if(error.message==='Network Error'){error.message=\"Network error - cannot reach backend server at \".concat(getBackendUrl());}else if(!error.response){error.message='No response from server. The backend might not be running.';}return Promise.reject(error);});","map":{"version":3,"names":["axios","React","BrowserRouter","Routes","Route","Login","Register","Dashboard","ConnectionTest","jsx","_jsx","jsxs","_jsxs","App","children","path","element","getCurrentPort","window","location","port","getBackendUrl","currentPort","console","log","API","create","baseURL","timeout","headers","interceptors","request","use","config","concat","url","origin","error","Promise","reject","response","message","code"],"sources":["C:/Users/DEll/Pictures/gunna/frontend/src/App.js"],"sourcesContent":["import axios from 'axios';\n\n\nimport React from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport Dashboard from './components/Dashboard';\nimport ConnectionTest from './components/ConnectionTest';\n\nexport default function App(){\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path='/' element={<Login/>} />\n        <Route path='/register' element={<Register/>} />\n        <Route path='/dashboard' element={<Dashboard/>} />\n        <Route path='/connection-test' element={<ConnectionTest/>} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\n\n\n\n\n\n// Get the current port from the window location\nconst getCurrentPort = () => {\n  return window.location.port || '3000';\n};\n\nconst getBackendUrl = () => {\n  const currentPort = getCurrentPort();\n  console.log('Frontend running on port:', currentPort);\n  \n  // If React is on 3002, backend should still be on 5000\n  return 'http://localhost:5000';\n};\n\nconst API = axios.create({\n  baseURL: getBackendUrl(),\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Enhanced request interceptor\nAPI.interceptors.request.use(\n  (config) => {\n    console.log(`üîÑ Making API request to: ${config.baseURL}${config.url}`);\n    console.log(`üìç Frontend: ${window.location.origin}`);\n    return config;\n  },\n  (error) => {\n    console.error('‚ùå Request setup error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Enhanced response interceptor\nAPI.interceptors.response.use(\n  (response) => {\n    console.log('‚úÖ Request successful');\n    return response;\n  },\n  (error) => {\n    console.error('‚ùå API Error Details:', {\n      message: error.message,\n      code: error.code,\n      response: error.response,\n      request: error.request\n    });\n    \n    if (error.code === 'ECONNREFUSED') {\n      error.message = `Cannot connect to backend server at ${getBackendUrl()}. Please ensure:\\n\\n1. Backend is running on port 5000\\n2. Run: node server.js in backend folder\\n3. No firewall is blocking the connection`;\n    } else if (error.message === 'Network Error') {\n      error.message = `Network error - cannot reach backend server at ${getBackendUrl()}`;\n    } else if (!error.response) {\n      error.message = 'No response from server. The backend might not be running.';\n    }\n    \n    return Promise.reject(error);\n  }\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}